<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.2a1">
  <Settings>
    <Param val="4" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s/%s_%s' % (expInfo['participant'], expInfo['participant'], expName)" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;sas_{randint(0, 999999):06.0f}&quot;'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="False" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_DIAMETER" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="LEFT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="trigger_table" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="False" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('LEFT_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="__start__">
      <RoutineSettingsComponent name="__start__" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="__start__" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_prepare_table" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_prepare_table" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Setting up the pulse table..." valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="start_trigger_table" plugin="None">
        <Param val="import pyxid2&amp;#10;import threading&amp;#10;import signal&amp;#10;&amp;#10;&amp;#10;def exit_after(s):&amp;#10;    '''&amp;#10;    function decorator to raise KeyboardInterrupt exception&amp;#10;    if function takes longer than s seconds&amp;#10;    '''&amp;#10;    def outer(fn):&amp;#10;        def inner(*args, **kwargs):&amp;#10;            timer = threading.Timer(s, signal.raise_signal, args=[signal.SIGINT])&amp;#10;            timer.start()&amp;#10;            try:&amp;#10;                result = fn(*args, **kwargs)&amp;#10;            finally:&amp;#10;                timer.cancel()&amp;#10;            return result&amp;#10;        return inner&amp;#10;    return outer&amp;#10;&amp;#10;&amp;#10;@exit_after(1)  # exit if function takes longer than 1 seconds&amp;#10;def _get_xid_devices():&amp;#10;    return pyxid2.get_xid_devices()&amp;#10;&amp;#10;&amp;#10;def get_xid_devices():&amp;#10;    print(&quot;Getting a list of all attached XID devices...&quot;)&amp;#10;    attempt_count = 0&amp;#10;    while attempt_count &gt;= 0:&amp;#10;        attempt_count += 1&amp;#10;        print('     Attempt:', attempt_count)&amp;#10;        attempt_count *= -1  # try to exit the while loop&amp;#10;        try:&amp;#10;            devices = _get_xid_devices()&amp;#10;        except KeyboardInterrupt:&amp;#10;            attempt_count *= -1  # get back in the while loop&amp;#10;    return devices&amp;#10;&amp;#10;&amp;#10;def generate_random_pulse_times(num_pulses=90, mean_interval_sec=60, rng=np.random.default_rng()):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Generate random pulse times spaced around a mean interval.&amp;#10;&amp;#10;    :param num_pulses: Number of pulses to generate&amp;#10;    :param mean_interval_sec: Mean interval in seconds between pulses&amp;#10;    :param rng: Random number generator instance&amp;#10;    :return: List of pulse times in milliseconds&amp;#10;    &quot;&quot;&quot;&amp;#10;    assert 0 &lt; num_pulses &lt;= 95, &quot;Number of pulses must be between 1 and 95.&quot;&amp;#10;&amp;#10;    min_interval_100ms = mean_interval_sec // 2 * 10&amp;#10;    max_interval_100ms = mean_interval_sec * 10 + min_interval_100ms&amp;#10;    intervals = rng.choice(&amp;#10;        np.arange(min_interval_100ms, max_interval_100ms + 1),&amp;#10;        size=num_pulses,&amp;#10;        replace=False&amp;#10;    )&amp;#10;    intervals_ms = intervals * 100  # convert to milliseconds&amp;#10;&amp;#10;    return np.cumsum(intervals_ms).astype(int)&amp;#10;&amp;#10;&amp;#10;devices = get_xid_devices()&amp;#10;assert devices, &quot;No XID device found. Cannot send synchronizing triggers.&quot;&amp;#10;&amp;#10;dev = devices[0]&amp;#10;print(&quot;Found device:&quot;, dev)&amp;#10;assert dev.device_name == 'Cedrus StimTracker Quad', &quot;Incorrect StimTracker detected.&quot;&amp;#10;&amp;#10;if dev.is_pulse_table_running():&amp;#10;    dev.stop_pulse_table()&amp;#10;&amp;#10;dev.set_lines(0x0000)&amp;#10;dev.clear_pulse_table()&amp;#10;&amp;#10;# pulse duration in milliseconds&amp;#10;pulse_duration = 50  # ms&amp;#10;dev.set_pulse_duration(pulse_duration)&amp;#10;&amp;#10;# Start EEG recording&amp;#10;print(&quot;Sending trigger code 126 to start EEG recording...&quot;)&amp;#10;dev.activate_line(bitmask=126)  # trigger 126 will start EEG&amp;#10;print(&quot;Waiting 10 seconds for the EEG recording to start...\n&quot;)&amp;#10;core.wait(10)  # wait 10s for the EEG system to start recording&amp;#10;&amp;#10;# Marching lights test&amp;#10;print(&quot;M-POD&lt;-&gt;eego 7-bit trigger lines test...&quot;)&amp;#10;for line in range(1, 8):  # raise lines 1-7 one at a time&amp;#10;    print(&quot;  raising line {} (bitmask {})&quot;.format(line, 2 ** (line-1)))&amp;#10;    dev.activate_line(lines=line)&amp;#10;    core.wait(0.5)  # wait 500ms between two consecutive triggers&amp;#10;dev.set_lines(0x0000)&amp;#10;print(&quot;EEG system is now ready for the experiment to start.\n&quot;)&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# set a random seed for reproducibility&amp;#10;rng = np.random.default_rng(seed=6841707)  # 6841707 is big-endian for &quot;has&quot;&amp;#10;&amp;#10;# send 4 pulses spaced 1000ms apart to indicate the start of the table&amp;#10;initial_pulse_ms = [0, 1000, 2000, 3000]  # initial pulses only raise line 6&amp;#10;&amp;#10;for pulse_time in initial_pulse_ms:&amp;#10;    dev.add_pulse_table_entry(pulse_time, 0x0040)  # 0x0040 = 64 = raising line 6&amp;#10;    dev.add_pulse_table_entry(pulse_time + pulse_duration, 0x0000)  # reset line 6 after pulse duration&amp;#10;&amp;#10;# now add 90 pulses spaced randomly around 60000ms=60s=1min apart&amp;#10;pulse_times = generate_random_pulse_times(num_pulses=90, mean_interval_sec=60, rng=rng)&amp;#10;pulse_times += initial_pulse_ms[-1]  # shift all pulse times to start after the initial pulses&amp;#10;&amp;#10;for pulse_time in pulse_times:&amp;#10;    dev.add_pulse_table_entry(pulse_time, 0x003F)  # 0x003F = 63 = raising lines 0 to 5&amp;#10;    dev.add_pulse_table_entry(pulse_time + pulse_duration, 0x0000)  # reset all lines after pulse duration&amp;#10;&amp;#10;dev.add_pulse_table_entry(0xFFFFFFFF, 0x0000)  # repeat the pulse table indefinitely&amp;#10;dev.run_pulse_table()&amp;#10;&amp;#10;assert dev.is_pulse_table_running(), &quot;Pulse table is not running successfully.&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="start_trigger_table" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="__start__"/>
  </Flow>
</PsychoPy2experiment>
